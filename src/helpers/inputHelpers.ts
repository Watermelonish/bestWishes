import { Keyboard } from "grammy";
import { MyConversation, MyContext } from "../models/seccionData";
import { months } from "../constants/months"
// –¢–∏–ø—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
interface DateSelectionResult {
    day: number;
    month: number;
    monthText: string;
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
export async function getOccasion(
    conversation: MyConversation,
    ctx: MyContext,
    options?: {
        customPrompt?: string;
        errorMessage?: string;
    }
): Promise<string> {
    const prompt = options?.customPrompt || "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è'):";
    const errorMsg = options?.errorMessage || "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";

    while (true) {
        await ctx.reply(prompt);
        const occasionCtx = await conversation.wait();
        const occasion = occasionCtx.message?.text?.trim();
        
        if (occasion && occasion.length > 0) {
            return occasion;
        }
        await ctx.reply(errorMsg);
    }
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
export async function getDate(
    conversation: MyConversation,
    ctx: MyContext,
    options?: {
        dayPrompt?: string;
        dayError?: string;
        monthPrompt?: string;
        monthError?: string;
    }
): Promise<DateSelectionResult> {
    const defaults = {
        dayPrompt: "üìÖ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞ (–æ—Ç 1 –¥–æ 31):",
        dayError: "‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 31. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        monthPrompt: "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        monthError: "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏–∑ —Å–ø–∏—Å–∫–∞."
    };

    const config = { ...defaults, ...options };

    let day: number;
    while (true) {
        await ctx.reply(config.dayPrompt);
        const dayCtx = await conversation.wait();
        day = parseInt(dayCtx.message?.text || '');
        
        if (!isNaN(day) && day >= 1 && day <= 31) break;
        await ctx.reply(config.dayError);
    }

    let monthIndex: number;
    while (true) {
        await ctx.reply(config.monthPrompt, {
            reply_markup: new Keyboard()
                .text("–Ø–Ω–≤–∞—Ä—å").text("–§–µ–≤—Ä–∞–ª—å").text("–ú–∞—Ä—Ç").row()
                .text("–ê–ø—Ä–µ–ª—å").text("–ú–∞–π").text("–ò—é–Ω—å").row()
                .text("–ò—é–ª—å").text("–ê–≤–≥—É—Å—Ç").text("–°–µ–Ω—Ç—è–±—Ä—å").row()
                .text("–û–∫—Ç—è–±—Ä—å").text("–ù–æ—è–±—Ä—å").text("–î–µ–∫–∞–±—Ä—å")
                .oneTime()
        });

        const monthCtx = await conversation.wait();
        monthIndex = months.indexOf(monthCtx.message?.text || '');
        
        if (monthIndex >= 0) break;
        await ctx.reply(config.monthError);
    }

    return {
        day,
        month: monthIndex + 1,
        monthText: months[monthIndex]
    };
}
export async function getRecipient(conversation: MyConversation, ctx: MyContext): Promise<string> {
    while (true) {
        await ctx.reply("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:");
        const nameCtx = await conversation.wait();
        const congratName = nameCtx.message?.text?.trim();
        
        if (congratName && congratName.length > 0) {
            return congratName;
        }
        await ctx.reply("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
}

export async function getStyle(conversation: MyConversation, ctx: MyContext): Promise<string | undefined> {
    await ctx.reply("üí¨ –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∫ —Å—Ç–∏–ª—é –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ç—ë–ø–ª–æ–µ', '—à—É—Ç–æ—á–Ω–æ–µ'). –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:", {
        reply_markup: new Keyboard()
            .text("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")
            .oneTime()
    });

    const infoCtx = await conversation.wait();
    return infoCtx.message?.text === "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" 
        ? undefined 
        : infoCtx.message?.text;
}