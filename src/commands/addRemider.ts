import { Keyboard } from "grammy";
import { reminderDB } from "../../";
import { Reminder } from "../models/reminder";
import { MyConversation, MyContext } from "../models/seccionData";
import { getDate, getOccasion, getRecipient, getStyle } from "../helpers/inputHelpers";
export async function addReminderConversation(conversation: MyConversation, ctx: MyContext) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    let occasion: string;
    let day: number;
    let month: number;
    let monthText: string;
    let congratName: string;
    let info: string | undefined;
    

    // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        occasion = await getOccasion(conversation, ctx);
        ({ day, month, monthText } = await getDate(conversation, ctx))        
        congratName = await getRecipient(conversation, ctx);
        info = await getStyle(conversation, ctx);

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        let isConfirmed = false;
        while (!isConfirmed) {
            const confirmationText = `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n
üéâ –°–æ–±—ã—Ç–∏–µ: ${occasion}
üìÖ –î–∞—Ç–∞: ${day} ${monthText}
üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${congratName}
üí¨ –°—Ç–∏–ª—å: ${info || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`;

            await ctx.reply(confirmationText, {
                reply_markup: new Keyboard()
                    .text("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ")
                    .text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
                    .text("‚ùå –û—Ç–º–µ–Ω–∞")
                    .oneTime()
            });

            const confirmCtx = await conversation.wait();
            if (confirmCtx.message?.text === "‚ùå –û—Ç–º–µ–Ω–∞"){
                await ctx.reply("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.");
                return
            }
            if (confirmCtx.message?.text === "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ") {
                isConfirmed = true;
            } else {
                await ctx.reply("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", {
                    reply_markup: new Keyboard()
                        .text("–°–æ–±—ã—Ç–∏–µ").text("–î–∞—Ç—É").row()
                        .text("–ü–æ–ª—É—á–∞—Ç–µ–ª—è").text("–°—Ç–∏–ª—å").row()
                        .text("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ")
                        .oneTime()
                });

                const editCtx = await conversation.wait();
                switch (editCtx.message?.text) {
                    case "–°–æ–±—ã—Ç–∏–µ": 
                    occasion = await getOccasion(conversation, ctx);
                    break;
                    case "–î–∞—Ç—É": 
                    ({ day, month, monthText } = await getDate(conversation, ctx))        
                    break;
                    case "–ü–æ–ª—É—á–∞—Ç–µ–ª—è": 
                    congratName = await getRecipient(conversation, ctx);
                    break;
                    case "–°—Ç–∏–ª—å": 
                    info = await getStyle(conversation, ctx);
                    break;
                    case "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ":
                        isConfirmed = true;
                        break;
                }
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        if (!ctx.chat?.id) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Ç");

        const reminder: Omit<Reminder, 'id'> = {
            chatid: ctx.chat.id,
            occasion,
            day,
            month,
            congratName,
            info,
        };

        const result = reminderDB.addReminder(reminder);
        await ctx.reply(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! (ID: ${result.id})`);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ addReminderConversation:", error);
        await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
}
export const addReminder = async (ctx) => {
    await ctx.conversation.enter("addReminderConversation");
}