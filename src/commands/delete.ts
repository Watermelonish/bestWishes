
import { InlineKeyboard } from 'grammy';
import {reminderDB} from '../../index'
import { getReminders } from './getReminder';
export const deleteReminder = async (ctx) => {
    try {
        const reminders = reminderDB.getRemindersByChatId(ctx.chat.id);
        
        if (!reminders.length) {
            return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
        }

        const keyboard = new InlineKeyboard();
        reminders.forEach(reminder => {
            keyboard.text(
                `${reminder.id}: ${reminder.occasion} (${reminder.day}.${reminder.month})`,
                `delete_${reminder.id}`
            ).row();
        });

        keyboard.text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel_delete');

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', {
            reply_markup: keyboard
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π');
    }
};

export const handleDeleteSelection = async (ctx) => {
    try {
        const action = ctx.callbackQuery?.data;
        
        if (action === 'cancel_delete') {
            await ctx.deleteMessage();
            return await ctx.reply('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        }

        if (!action?.startsWith('delete_')) return;

        const id = Number(action.replace('delete_', ''));
        if (!id) return;

        const reminder = reminderDB.getReminderById(id);
        if (!reminder) {
            await ctx.answerCallbackQuery('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        await ctx.editMessageText(
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?\n` +
            `üéâ –°–æ–±—ã—Ç–∏–µ: ${reminder.occasion}\n` +
            `üìÖ –î–∞—Ç–∞: ${reminder.day}.${reminder.month}\n` +
            `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${reminder.congratName}`,
            {
                reply_markup: new InlineKeyboard()
                    .text('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', `confirm_delete_${id}`)
                    .text('‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', 'cancel_delete')
            }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

export const confirmDeleteReminder = async (ctx) => {
    try {
        const action = ctx.callbackQuery?.data;
        
        if (action === 'cancel_delete') {
            await ctx.deleteMessage();
            return await ctx.reply('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        }

        if (!action?.startsWith('confirm_delete_')) return;

        const id = Number(action.replace('confirm_delete_', ''));
        if (!id) return;

        const success = reminderDB.deleteReminder(id);
        
        if (success) {
            await ctx.editMessageText('‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            await getReminders(ctx);
        } else {
            await ctx.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:', error);
        await ctx.answerCallbackQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏');
    }
};
