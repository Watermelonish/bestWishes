import { Keyboard } from "grammy";
import { reminderDB } from "../..";
import { Reminder } from "../models/reminder";
import { MyConversation, MyContext } from "../models/seccionData";
import { getDate, getOccasion, getRecipient, getStyle } from "../helpers/inputHelpers";
import { generateCongratulation } from "../api/llm.api";

export const quickGeneration = async (ctx) => {
    await ctx.conversation.enter("quickReminderConversation");
}

export async function quickReminderConversation(conversation: MyConversation, ctx: MyContext) {
    let occasion: string;
    let congratName: string;
    let info: string | undefined;
        try {
            occasion = await getOccasion(conversation, ctx);
            congratName = await getRecipient(conversation, ctx);
            info = await getStyle(conversation, ctx);
    
            let isConfirmed = false;
            while (!isConfirmed) {
                const confirmationText = `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n
    üéâ –°–æ–±—ã—Ç–∏–µ: ${occasion}
    üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${congratName}
    üí¨ –°—Ç–∏–ª—å: ${info || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`;
    
                await ctx.reply(confirmationText, {
                    reply_markup: new Keyboard()
                        .text("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ")
                        .text("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
                        .text("‚ùå –û—Ç–º–µ–Ω–∞")
                        .oneTime()
                });
    
                const confirmCtx = await conversation.wait();
                if (confirmCtx.message?.text === "‚ùå –û—Ç–º–µ–Ω–∞"){
                    await ctx.reply("‚ùå –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
                    return
                }
                if (confirmCtx.message?.text === "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ") {
                    isConfirmed = true;
                } else {
                    await ctx.reply("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", {
                        reply_markup: new Keyboard()
                            .text("–°–æ–±—ã—Ç–∏–µ").row()
                            .text("–ü–æ–ª—É—á–∞—Ç–µ–ª—è").row()
                            .text("–°—Ç–∏–ª—å").row()
                            .text("‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ")
                            .oneTime()
                    });
    
                    const editCtx = await conversation.wait();
                    switch (editCtx.message?.text) {
                        case "–°–æ–±—ã—Ç–∏–µ": 
                        occasion = await getOccasion(conversation, ctx);
                        break;
                        case "–ü–æ–ª—É—á–∞—Ç–µ–ª—è": 
                        congratName = await getRecipient(conversation, ctx);
                        break;
                        case "–°—Ç–∏–ª—å": 
                        info = await getStyle(conversation, ctx);
                        break;
                        case "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ":
                            isConfirmed = true;
                            break;
                    }
                }
            }
    
            const reminder: Omit<Reminder, 'id'> = {
                chatid: ctx.chat.id,
                occasion,
                day:0,
                month:0,
                congratName,
                info,
            };
            const result = await generateCongratulation(reminder)
            await ctx.reply(result);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è:", error);
            await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
}
